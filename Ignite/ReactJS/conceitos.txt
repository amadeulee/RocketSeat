- Single page application - cada vez q navegar pra uma tela diferente ele carrega so o conteudo que precisa mudar, e n recarrega a aplicacao toda.



babel preset env - vai entender qual ambiente a aplicacao vai rodar, vai dizer ao babel o que ele precisa converter do codigo


Componentes - formas de encapsular uma quantidade de codigo dentro de um unico elemento. Esse elemento tem sua propria funcionalidade, estrutura e estilirização. Forma de dividir a aplicação em varios pedaços, e que quando conectados formam o app. Eh uma função que retorna um HTML


3 conceitos mais importantes do React
-Componente
-Propriedade
-Estado	


PROPRIEDADES : Sao informacoes/variaveis que posso passar para o componente funcionar de forma diferente.


**QUANDO PERCEBEMOS QUE ALGUMA COISA ESTÁ REPETINDO DENTRO DA NOSSA APLICAÇÃO, NA MAIORIA DAS VEZES FAZ SENTIDO CRIAR UM COMPONENTE PARA ENCAPSULAR
 
**FRAGMENT -> TAG DO HTML SEM NENHUM NOME <> </>

**O REACT NAO FICA MONITORANDO AS VARIAVEIS PARA VER SE TEM SEUS VALORES ALTERADO PARA ENTAO RENDERIZAR OS CONTEUDO DOS COMPONENTES EM TELA.


ESTADO : variaveis que o react vai monitorar, e toda vez q o valor dessas variaveis mudarem, ai sim ele vai renderizar e exibir o conteudo do componente de novo


O react nao busca ficar observando cada variavel da aplicacao para ver se teve alteração, assim seria menos performatico. Por isso usa estados, que eles observam quando há alteração neles e re renderizam


*IMUTABILIDADE: uma variavel nunca vai poder ter o seu valor alterado, vai receber sempre um novo valor. Sempre crio um novo espaco na memoria contendo minha nova informação do que alterar uma informação que já está salvo na memoria




USEEFFECT - serve para disparar uma função quando algo acontecer na aplicação.



**Pq que as vezes tem um console repetido no terminal?

Pois quando renderiza pela primeira vez, vc renderiza o estado vazio, e quando vc faz alteração de estado/variavel, vc está renderizando novamente, assim faz o console 2 vezes


* TypeScript no React serve para tipar as propriedades que os componentes vao receber. Os estados


*PQ USAR EXPORT FUNCTION AO INVES DE EXPORT DEFAULT
- usando o export function a gente limita o nome do componente que vamos utilizar em outro local para apenas o nome declarado dentro do componente, assim ajuda no nosso controle, pois quem está importando o componente nao consegue alterar o nome. Alem disso a importacao automatica do edito de texto fica mais inteligente.
- usando o export default, quem define o nome do componente nao eh quem está exportando o componente, e sim quem está importando


*PQ USAR STYLED COMPONENTS?
- permite usar encadeamento
- quando usa styled components, a nossa estilirizacao fica dentro dos escopo apenas daquele componente q estamos estilirizando. O nosso CSS sempre vai ficar mt proximo do componente em si.